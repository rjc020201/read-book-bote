CSAPP 中文名深入理解计算机系统
关于这本书的重要性不用过多描述，总之是一本非常不错的blog

第一章 计算机系统漫游
C语言的历史：1969～1973年创建的，开始是ANSI C标准就是89年的标准，后来就是ISO的责任
Unix几乎全部由C编写的
实际上对于源文件有四个不同的处理器：
cpp（预处理器），ccl（编译器），as（汇编器），ld（链接器）
预处理：根据#字符开头的命令，修改C程序，这样可以读取某某文件，将ta插入到源文件中，所以我们得到另外一个源文件，这个文件以.i为扩展名
编译阶段：将前面的.i文件翻译成.s文件，这个命名可能是为了纪念masm
汇编阶段：as将.s翻译成机器语言指令，把这些指令打包成一种叫做可重定位目标程序的格式，并将结果保存在目标文件.o中，这个时候的.o就是一个二进制文件
链接阶段：合并各种.o文件
GNU项目：这是Richard Stallman 发起的一个打造类Unix系统的项目，除了内核是linux的，其他的部分都和Unix相似
shell 是一个命令解释器，注意这个程序上面运行程序的时候如果你不指明是后台运行，那么shell会阻塞运行

系统的硬件组成：
1总线：一组电子管线，设计成了传送定长的字节块，这些字节块又被称为字
2I/O设备：每个I/O设备都通过一个控制器或者适配器与I/O总线相连，控制器和适配器之间的区别在于他们的封装方式不一样，控制器是I/O设备本身或者系统的主印制电路板（主板）上的芯片组，而适配器是一块插在主板插槽上的卡
3主存：临时存储设备，用来存放程序和处理程序的数据，物理上由一组DRAM（动态随机存取存储器）芯片组成，从逻辑上说，这就是一个线性的字节数组，每个字节都有对应的唯一的地址，并且地址从零开始
4处理器（CPU）：全称中央处理单元，核心是PC（程序计数器），大小是一个字，处理器按照一个指令执行模型工作（指令集架构决定），CPU在指令的要求下可能执行：加载，存储，操作，跳转。指令集架构和处理器的微体系架构区分：
    指令集架构：每条指令的效果，微体系架构：怎么实现执行指令

运行hello程序：
这里面大量地读取磁盘，结果是一定会很慢，所以可以发现高速缓存的中重要性：cache就是暂时的集结区域，存放着存储器近期可能会用到的信息，L1可以达到数万字节的存储量，速度堪比寄存器，使用的是静态存储器(SRAM)实现
储存设备形成了层次结构更加将这个思想拓展了
操作系统管理硬件：擦作系统主要有两个基本功能：1防止硬件被失控的软件滥用，2向应用程序提供简单一致的机制来控制复杂而又通常不相同的各种层次的硬件，这主要是通过几个抽象的概念做到的，文件就是对应I/O设备的抽象表示
    虚拟内存是对主存和磁盘的I/O设备的抽象表示，进程是对处理器，主存和I/O设备的抽象表示
Unix系统的部分历史：20世纪60年代，大型复杂的操作系统盛行的年代，比如IBM的OS/360和Honey-well的Multic系统，贝尔实验室曾经是Multic项目的最初参与者，后来一群贝尔实验室的部分人员基于这个系统的部分思想作出了Unix
    贝尔实验室将这些代码无条件供给别的大学，则和之后有两个系统出世，一个是加州大学伯克利分校的BSD，一个是贝尔实验室的System V,这两个系统就是后来的其他厂商各种版本的原本版本
    但是这些厂商加入开发之后，他们希望自己的操作系统更加地独特以便控制市场，这时候的IEEE努力标准化Unix的开发，后来由Richard Stallman命名为“Posix",最近一个被称为”标准Unix规范“的独立标准化工作和Posix一起创建了统一的Unix系统标准
进程：一个CPU能够运行多个进程的假象是利用一种交错执行的机制称为上下文切换，这里的上下文就是当前进程运行所需的所有状态信息，